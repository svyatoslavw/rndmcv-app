generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  email         String        @unique
  name          String
  image         String        @default("/images/logo.webp")
  emailVerified DateTime?
  password      String?
  role          UserRole      @default(USER)
  accounts      Account[]
  resumes       Resume[]
  sessions      Session[]
  subscription  Subscription?

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Resume {
  id            String               @id @default(cuid())
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  general       Json
  customization Json
  userId        String               @map("user_id")
  user          User                 @relation(fields: [userId], references: [id])
  type          EnumResumeVisibility @default(PRIVATE)

  @@map("resumes")
}

model Subscription {
  id         String               @id @default(cuid())
  createdAt  DateTime             @default(now()) @map("created_at")
  updatedAt  DateTime             @updatedAt @map("updated_at")
  expiresAt  DateTime             @map("expires_at")
  customerId String?              @unique @map("customer_id")
  type       EnumSubscriptionType @default(BASIC)
  price      Int
  userId     String               @unique @map("user_id")
  user       User                 @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum EnumResumeVisibility {
  PUBLIC
  PRIVATE
}

enum EnumSubscriptionType {
  BASIC
  STANDART
  PREMIUM
}
